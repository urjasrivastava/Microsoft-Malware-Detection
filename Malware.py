# -*- coding: utf-8 -*-
"""fullfeaturesMalware.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PUOopcd-LY3y2cRR2ZqrpfvooNY-b92w
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import transforms
import seaborn as sns
import sklearn.model_selection as model_selection
from sklearn.preprocessing import OrdinalEncoder
from sklearn import metrics
from sklearn.model_selection import KFold, cross_val_score
from sklearn.pipeline import make_pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder 
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.feature_selection import VarianceThreshold
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from sklearn.feature_selection import RFECV
from sklearn import  linear_model
from sklearn.model_selection import train_test_split, StratifiedKFold
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_auc_score
from sklearn.model_selection import GridSearchCV
from sklearn.calibration import CalibratedClassifierCV
from sklearn.ensemble import ExtraTreesClassifier
import xgboost as xgb
import lightgbm as lgb
from sklearn.metrics import roc_auc_score
from sklearn.svm import SVC
from sklearn.svm import LinearSVC
from sklearn.ensemble import AdaBoostClassifier
from sklearn.naive_bayes import GaussianNB
# %matplotlib inline

from google.colab import drive
drive.mount('/content/drive')

malware=pd.read_csv('/content/drive/MyDrive/malware-detection-va/train.csv')

target=malware['HasDetections']
malware

"""###Handling null values

Columns with more than 50% null values are dropped.
"""

missing=malware.isnull().sum()*100/len(malware)
print(missing[missing>50])

malware.drop(['DefaultBrowsersIdentifier','MachineIdentifier','PuaMode','Census_ProcessorClass','Census_InternalBatteryType','Census_IsFlightingInternal','Census_ThresholdOptIn',
'Census_IsWIMBootEnabled'],axis=1,inplace=True)  #dropping null value columns

"""###Feature Engineering and handling of features by data type"""

def selectbytype(df,type):  
 return df.select_dtypes(include=type) #function to select features by dtype

categorical=selectbytype(malware,'object')
categorical

"""Function to split some important categorical columns and one hot encoding of the smart screen feature."""

def split(df):  
  df1=pd.DataFrame() #split categorical features
  df1[['App1','App2','App3','App4']]=df['AppVersion'].str.split('.',expand=True)
  df1[['Av1','Av2','Av3','Av4']]=df['AvSigVersion'].str.split('.',expand=True)
  df1[['Os1','Os2','Os3','Os4']]=df['Census_OSVersion'].str.split('.',expand=True)
  df1[['Eng1','Eng2','Eng3','Eng4']]=df['EngineVersion'].str.split('.',expand=True)
  df1.drop(['App1','Eng1','Eng2','Av4'],axis=1,inplace=True) 
  col=df['SmartScreen'].str.lower().replace('enabled',np.NaN)   #one hot encoding of smartscreen feature
  dummy=pd.get_dummies(col.astype('category').values.codes,prefix='SmartScreeen')
  df1=df1.join(dummy)   
  return df1

"""###Function for frequency encoding"""

def frequencyencoding(df,cols): #function of frequency encoding
 for col in cols:
   m=malware[col].str.lower().astype('category').value_counts(dropna=False).to_dict()
   df[col]=df[col].str.lower().map(m)
 return df

categoricalsplit=split(categorical.copy()).astype('int64')
categoricalfreq=frequencyencoding(categorical.copy(),categorical.columns)
categoricalfreq=pd.concat([categoricalfreq,categoricalsplit],join='outer',axis=1)

categoricalfreq

intdata=malware.select_dtypes(include='int64')
intdata

floatdata=malware.select_dtypes(include='float64')
floatdata

"""###Impute missing values by mean"""

imp=SimpleImputer(missing_values=np.nan, strategy='mean') #mean imputation
imp.fit(floatdata)
floatdata=pd.DataFrame(imp.transform(floatdata),columns=floatdata.columns)

"""### Adding two new features 

1. Avnew - difference between the number of av products installed and the number of av products enabled.

2. Gamer with firewall- feature interaction to capture whether gamer has firewall enabled or not.
"""

floatdata['Avnew']=floatdata['AVProductsInstalled']-floatdata['AVProductsEnabled'] #difference between the number of av products installed and the number of av products enabled.
floatdata['GamerwithFirewall']=floatdata["Wdft_IsGamer"]+floatdata["Firewall"] #feature interaction to capture whether gamer has firewall enabled or not.

train=pd.concat([categoricalfreq,intdata,floatdata],join='outer',axis=1)
train.drop(['HasDetections'],inplace=True,axis=1)

train.shape

"""###Best model - XGboost"""

#best public leaderboard score-0.72193 private score-0.72186
clf_xgb2=xgb.XGBClassifier(tree_method='gpu_hist',n_estimators=1800,reg_alpha =1,reg_lambda =3,scale_pos_weight=1,
learning_rate=0.01,max_depth=10,gamma=.9,subsample=.9,min_sample_leaf=300,colsample_bytree=0.3,objective='binary:logistic',n_jobs=-1)

cv=StratifiedKFold(n_splits=5,shuffle=True, random_state=45)
cross_val_score(clf_xgb2,train,target,cv=cv,scoring='roc_auc')

modelgb=clf_xgb2.fit(train,target)

testdata=pd.read_csv('/content/drive/My Drive/malware-detection-va/test_to_give.csv')
testdata

machineid=testdata['MachineIdentifier']
testdata.drop(['DefaultBrowsersIdentifier','MachineIdentifier','PuaMode','Census_ProcessorClass','Census_InternalBatteryType','Census_IsFlightingInternal','Census_ThresholdOptIn',
'Census_IsWIMBootEnabled'],axis=1,inplace=True)

catdatat=selectbytype(testdata,'object')
catdatasplit=split(catdatat.copy()).astype('int64')
catdatatfreq=frequencyencoding(catdatat.copy(),catdatat.columns)
catdatatfreq=pd.concat([catdatatfreq,catdatasplit],join='outer',axis=1)
catdatatfreq

intdatat=selectbytype(testdata,'int64')
intdatat

floatdatat=selectbytype(testdata,'float64')
floatdatat=pd.DataFrame(imp.transform(floatdatat),columns=floatdatat.columns)
floatdatat['Avnew']=floatdatat['AVProductsInstalled']-floatdatat['AVProductsEnabled']
floatdatat['GamerwithFirewall']=floatdatat["Wdft_IsGamer"]+floatdatat["Firewall"]
floatdatat

test=pd.concat([catdatatfreq,intdatat,floatdatat],join='outer',axis=1)
test

prediction=pd.DataFrame(modelgb.predict_proba(test))
prediction

pre=pd.DataFrame()
pre['MachineIdentifier']=machineid
pre['HasDetections']=prediction.loc[:,1]
pre

pre.to_csv('pre.csv',index=False)